import { PLUGIN, UI } from "@common/networkSides";
import {
  generateGcodeForNode,
  generateFilename,
  laserInlineOn,
  laserInlineOff,
} from "./gcode-utils";

export const PLUGIN_CHANNEL = PLUGIN.channelBuilder()
  .emitsTo(UI, (message) => {
    figma.ui.postMessage(message);
  })
  .receivesFrom(UI, (next) => {
    const listener: MessageEventHandler = (event) => next(event);
    figma.ui.on("message", listener);
    return () => figma.ui.off("message", listener);
  })
  .startListening();

// ---------- Message handlers

PLUGIN_CHANNEL.registerMessageHandler("ping", () => {
  return "pong";
});

PLUGIN_CHANNEL.registerMessageHandler("hello", (text) => {
  console.log("UI side said:", text);
});

PLUGIN_CHANNEL.registerMessageHandler("createRect", (width, height) => {
  if (figma.editorType === "figma") {
    const rect = figma.createRectangle();
    rect.x = 0;
    rect.y = 0;
    rect.name = "Plugin Rectangle # " + Math.floor(Math.random() * 9999);
    rect.fills = [
      {
        type: "SOLID",
        color: {
          r: Math.random(),
          g: Math.random(),
          b: Math.random(),
        },
      },
    ];
    rect.resize(width, height);
    figma.currentPage.appendChild(rect);
    figma.viewport.scrollAndZoomIntoView([rect]);
    figma.closePlugin();
  }
});

PLUGIN_CHANNEL.registerMessageHandler("exportSelection", async () => {
  const selectedNodes = figma.currentPage.selection;
  if (selectedNodes.length === 0) {
    throw new Error("No selection is present.");
  }

  const selection = selectedNodes[0];
  const bytes = await selection.exportAsync({
    format: "PNG",
    contentsOnly: false,
  });

  return "data:image/png;base64," + figma.base64Encode(bytes);
});

PLUGIN_CHANNEL.registerMessageHandler(
  "generateGcode",
  async (feedRate?: number, rapidFeedRate?: number, laserPower?: number) => {
    // Set default values if not provided
    const feedRateValue = feedRate || 1000;
    const rapidFeedRateValue = rapidFeedRate || 3000;
    const laserPowerValue: number = laserPower || 255;

    const nodes = figma.currentPage.selection;
    if (nodes.length === 0) {
      throw new Error("No selection is present.");
    }

    // Start with feed rate setup at the beginning of G-code
    let gcode = `; Generated by Figma to G-code Plugin\n`;
    gcode += `; Date: ${new Date().toISOString()}\n`;
    gcode += `; Page: ${figma.currentPage.name}\n`;
    gcode += `; Selected objects: ${nodes.length}\n`;
    gcode += `; Feed Rate: ${feedRateValue} mm/min\n`;
    gcode += `; Rapid Feed Rate: ${rapidFeedRateValue} mm/min\n`;
    gcode += `; Laser Power: ${laserPowerValue} (S parameter)\n`;
    gcode += `;\n`;
    gcode += `G21 ; Set units to millimeters\n`;
    gcode += `G90 ; Absolute positioning\n`;
    gcode += `G0 F${rapidFeedRateValue} S0 ; Set rapid feed rate and ensure laser is off\n`;
    gcode += `G1 F${feedRateValue} ; Set cutting feed rate\n`;
    gcode += laserInlineOn(); // Enable laser inline mode
    gcode += `\n`;

    for (const node of nodes) {
      gcode += generateGcodeForNode(
        node,
        laserPowerValue,
        rapidFeedRateValue,
        feedRateValue
      );
    }

    // Add ending commands
    gcode += `\n; End of G-code\n`;
    gcode += laserInlineOff(); // Disable laser inline mode
    gcode += `M30 ; Program end\n`;

    return gcode;
  }
);
